Compiling phase_2_programs/really_complex_comparison.sl
---INITIAL AST---
digraph ShuLangProgram {
	node0[label="if"]
	program -> node0
	node1[label="and"]
	node0 -> node1
	node2[label="or"]
	node1 -> node2
	node3[label=">"]
	node2 -> node3
	node4[label="2"]
	node3 -> node4
	node5[label="5"]
	node3 -> node5
	node6[label=">"]
	node2 -> node6
	node7[label="3"]
	node6 -> node7
	node8[label="0"]
	node6 -> node8
	node9[label="or"]
	node1 -> node9
	node10[label="<"]
	node9 -> node10
	node11[label="6"]
	node10 -> node11
	node12[label="4"]
	node10 -> node12
	node13[label="<"]
	node9 -> node13
	node14[label="6"]
	node13 -> node14
	node15[label="9"]
	node13 -> node15
	node16[label="then"]
	node0 -> node16
	node17[label="print"]
	node16 -> node17
	node18[label="True"]
	node17 -> node18
	node19[label="else"]
	node0 -> node19
	node20[label="print"]
	node19 -> node20
	node21[label="False"]
	node20 -> node21
}
Type checking...
Running...
true
---UNIQUIFICATION---
digraph ShuLangProgram {
	node22[label="if"]
	program -> node22
	node23[label="and"]
	node22 -> node23
	node24[label="or"]
	node23 -> node24
	node25[label=">"]
	node24 -> node25
	node26[label="2"]
	node25 -> node26
	node27[label="5"]
	node25 -> node27
	node28[label=">"]
	node24 -> node28
	node29[label="3"]
	node28 -> node29
	node30[label="0"]
	node28 -> node30
	node31[label="or"]
	node23 -> node31
	node32[label="<"]
	node31 -> node32
	node33[label="6"]
	node32 -> node33
	node34[label="4"]
	node32 -> node34
	node35[label="<"]
	node31 -> node35
	node36[label="6"]
	node35 -> node36
	node37[label="9"]
	node35 -> node37
	node38[label="then"]
	node22 -> node38
	node39[label="print"]
	node38 -> node39
	node40[label="True"]
	node39 -> node40
	node41[label="else"]
	node22 -> node41
	node42[label="print"]
	node41 -> node42
	node43[label="False"]
	node42 -> node43
}
Type checking...
Running
true
---SHORT CIRCUIT-IFICATION
PROGRAM:
	IF
		OPERATOR(<)
			INTEGER(6)
			INTEGER(4)
	THEN
		BIND(short_circ1) to
			BOOL(True)
	ELSE
		IF
			OPERATOR(>)
				INTEGER(2)
				INTEGER(5)
		THEN
			BIND(short_circ0) to
				BOOL(True)
		ELSE
			BIND(short_circ0) to
				OPERATOR(>)
					INTEGER(3)
					INTEGER(0)
		BIND(short_circ1) to
			OPERATOR(<)
				INTEGER(6)
				INTEGER(9)
	IF
		OPERATOR(and)
			REFERENCE(short_circ0)
			REFERENCE(short_circ1)
	THEN
		PRINT
			BOOL(True)
	ELSE
		PRINT
			BOOL(False)
